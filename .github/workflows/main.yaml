name: Build and Release
on:
  workflow_dispatch:

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "stable"
      - name: Build and Test on Default Platform
        run: |
          go build -v ./...
          go test -v ./...
      - name: Delete Existing Release Assets
        run: |
          release_id=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/oneclickvirt/cputest/releases/tags/output" | jq -r '.id')
          if [ "$release_id" != "null" ]; then
            echo "Deleting existing release assets..."
            assets=$(curl -s -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/oneclickvirt/cputest/releases/$release_id/assets" | jq -r '.[] | .id')
            for asset in $assets; do
              echo "Deleting asset with ID: $asset"
              curl -s -X DELETE -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/oneclickvirt/cputest/releases/assets/$asset"
            done
            sleep 10
          else
            echo "No existing release found, skipping asset deletion"
          fi
  release-binary:
    name: Release Go Binary
    runs-on: ${{ (matrix.goos == 'windows' && (matrix.goarch == 'arm64' || matrix.goarch == 'arm')) && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
        goos: [windows, freebsd, linux, darwin]
        goarch: [amd64, 386]
        exclude:
          - goarch: 386
            goos: darwin
          - goarch: 386
            goos: freebsd
        include:
          - goos: windows
            goarch: arm64
          - goos: windows
            goarch: arm
            goarm: 7
          - goos: darwin
            goarch: arm64
          - goos: linux
            goarch: arm
            goarm: 7
          - goos: linux
            goarch: arm64
          - goos: linux
            goarch: riscv64
          - goos: linux
            goarch: mips64
          - goos: linux
            goarch: mips64le
          - goos: linux
            goarch: mipsle
          - goos: linux
            goarch: mips
          - goos: linux
            goarch: ppc64
          - goos: linux
            goarch: ppc64le
          - goos: freebsd
            goarch: arm64
          - goos: freebsd
            goarch: arm
            goarm: 7
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "stable"
      - name: Install base build tools and cross compilers
        run: |
          sudo apt-get update
          if [ "${{ runner.arch }}" == "ARM64" ]; then
            sudo apt-get install -y build-essential clang lld llvm jq curl gcc-aarch64-linux-gnu
          else
            sudo apt-get install -y build-essential clang lld llvm jq curl gcc-multilib g++-multilib
          fi
          case "${{ matrix.goos }}-${{ matrix.goarch }}" in
            linux-arm)
              if [ "${{ runner.arch }}" != "ARM64" ]; then
                sudo apt-get install -y gcc-arm-linux-gnueabihf
              fi ;;
            linux-arm64)
              if [ "${{ runner.arch }}" != "ARM64" ]; then
                sudo apt-get install -y gcc-aarch64-linux-gnu
              fi ;;
            linux-riscv64)
              sudo apt-get install -y gcc-riscv64-linux-gnu ;;
            linux-mips64)
              sudo apt-get install -y gcc-mips64-linux-gnuabi64 ;;
            linux-mips64le)
              sudo apt-get install -y gcc-mips64el-linux-gnuabi64 ;;
            linux-mipsle)
              sudo apt-get install -y gcc-mipsel-linux-gnu ;;
            linux-mips)
              sudo apt-get install -y gcc-mips-linux-gnu ;;
            linux-ppc64)
              sudo apt-get install -y gcc-powerpc64-linux-gnu ;;
            linux-ppc64le)
              sudo apt-get install -y gcc-powerpc64le-linux-gnu ;;
            windows-amd64|windows-386)
              if [ "${{ runner.arch }}" != "ARM64" ]; then
                sudo apt-get install -y gcc-mingw-w64-x86-64 gcc-mingw-w64-i686
              fi ;;
            freebsd-*)
              sudo apt-get install -y clang lld ;;
            *)
              echo "No additional cross compiler needed" ;;
          esac
      - name: Set up FreeBSD sysroot
        if: ${{ matrix.goos == 'freebsd' }}
        run: |
          mkdir -p /tmp/freebsd-sysroot
          echo "Downloading FreeBSD base.txz for sysroot..."
          if [ "${{ matrix.goarch }}" == "amd64" ]; then
            curl -L -o base.txz https://download.freebsd.org/ftp/releases/amd64/14.1-RELEASE/base.txz
          elif [ "${{ matrix.goarch }}" == "arm64" ]; then
            curl -L -o base.txz https://download.freebsd.org/ftp/releases/arm64/aarch64/14.1-RELEASE/base.txz
          elif [ "${{ matrix.goarch }}" == "arm" ]; then
            curl -L -o base.txz https://download.freebsd.org/ftp/releases/arm/armv7/14.1-RELEASE/base.txz
          else
            curl -L -o base.txz https://download.freebsd.org/ftp/releases/amd64/14.1-RELEASE/base.txz
          fi
          sudo tar -C /tmp/freebsd-sysroot -xf base.txz
          rm base.txz
          echo "SYSROOT=/tmp/freebsd-sysroot" >> $GITHUB_ENV
      - name: Set up Darwin SDK
        if: ${{ matrix.goos == 'darwin' }}
        run: |
          git clone https://github.com/tpoechtrager/osxcross
          cd osxcross
          wget -nc https://github.com/joseluisq/macosx-sdks/releases/download/10.15/MacOSX10.15.sdk.tar.xz
          mv MacOSX10.15.sdk.tar.xz tarballs/
          UNATTENDED=yes OSX_VERSION_MIN=10.15 ./build.sh
          echo "OSXCROSS_PATH=$(pwd)/target/bin" >> $GITHUB_ENV
          echo "$(pwd)/target/bin" >> $GITHUB_PATH
      - name: Set cross compiler
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          GOARM: ${{ matrix.goarm || '' }}
          SYSROOT: ${{ env.SYSROOT || '' }}
        run: |
          set -e
          case "${GOOS}-${GOARCH}" in
            linux-arm)
              if [ "${{ runner.arch }}" == "ARM64" ]; then
                echo "CC=gcc" >> $GITHUB_ENV
              else
                echo "CC=arm-linux-gnueabihf-gcc" >> $GITHUB_ENV
              fi ;;
            linux-arm64)
              if [ "${{ runner.arch }}" == "ARM64" ]; then
                echo "CC=gcc" >> $GITHUB_ENV
              else
                echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
              fi ;;
            linux-riscv64)
              echo "CC=riscv64-linux-gnu-gcc" >> $GITHUB_ENV ;;
            linux-mips64)
              echo "CC=mips64-linux-gnuabi64-gcc" >> $GITHUB_ENV ;;
            linux-mips64le)
              echo "CC=mips64el-linux-gnuabi64-gcc" >> $GITHUB_ENV ;;
            linux-mipsle)
              echo "CC=mipsel-linux-gnu-gcc" >> $GITHUB_ENV ;;
            linux-mips)
              echo "CC=mips-linux-gnu-gcc" >> $GITHUB_ENV ;;
            linux-ppc64)
              echo "CC=powerpc64-linux-gnu-gcc" >> $GITHUB_ENV ;;
            linux-ppc64le)
              echo "CC=powerpc64le-linux-gnu-gcc" >> $GITHUB_ENV ;;
            freebsd-arm)
              echo "CC=clang --target=armv7-unknown-freebsd --sysroot=${SYSROOT}" >> $GITHUB_ENV ;;
            freebsd-arm64)
              echo "CC=clang --target=aarch64-unknown-freebsd --sysroot=${SYSROOT}" >> $GITHUB_ENV ;;
            freebsd-amd64)
              echo "CC=clang --target=x86_64-unknown-freebsd --sysroot=${SYSROOT}" >> $GITHUB_ENV ;;
            windows-amd64)
              if [ "${{ runner.arch }}" == "ARM64" ]; then
                echo "CGO_ENABLED=0" >> $GITHUB_ENV
              else
                echo "CC=x86_64-w64-mingw32-gcc" >> $GITHUB_ENV
              fi ;;
            windows-386)
              if [ "${{ runner.arch }}" == "ARM64" ]; then
                echo "CGO_ENABLED=0" >> $GITHUB_ENV
              else
                echo "CC=i686-w64-mingw32-gcc" >> $GITHUB_ENV
              fi ;;
            windows-arm|windows-arm64)
              echo "CC=gcc" >> $GITHUB_ENV ;;
            darwin-amd64)
              echo "CC=o64-clang" >> $GITHUB_ENV
              echo "CXX=o64-clang++" >> $GITHUB_ENV ;;
            darwin-arm64)
              echo "CC=oa64-clang" >> $GITHUB_ENV
              echo "CXX=oa64-clang++" >> $GITHUB_ENV ;;
            *)
              echo "Using default system compiler for ${GOOS}-${GOARCH}" ;;
          esac
      - name: Build Binary
        env:
          GOARM: ${{ matrix.goarm || '' }}
          CC: ${{ env.CC }}
          CXX: ${{ env.CXX }}
          CGO_ENABLED: ${{ env.CGO_ENABLED || '1' }}
        run: |
          mkdir -p bin
          cd cmd
          output_file="../bin/cputest-${{ matrix.goos }}-${{ matrix.goarch }}"
          echo "::group::Building for ${{ matrix.goos }}/${{ matrix.goarch }}"
          set +e
          if [ "$CGO_ENABLED" == "0" ]; then
            CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} GOARM=$GOARM \
              go build -o "$output_file" \
              -v \
              -ldflags="-s -w" \
              -trimpath \
              .
          else
            CGO_ENABLED=1 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} GOARM=$GOARM \
              go build -o "$output_file" \
              -v \
              -ldflags="-extldflags=-static -s -w" \
              -trimpath \
              .
          fi
          build_exit=$?
          echo "::endgroup::"
          if [ $build_exit -ne 0 ]; then
            echo "::warning::Build failed for ${{ matrix.goos }}/${{ matrix.goarch }}"
            rm -f "$output_file" 2>/dev/null
          else
            echo "Successfully built: $output_file"
          fi
      - name: Upload Artifact
        if: success() || failure()
        run: |
          release_id=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/oneclickvirt/cputest/releases/tags/output" | jq -r '.id')
          if [ -z "$release_id" ] || [ "$release_id" = "null" ]; then
            echo "::error::Failed to get release ID"
            exit 1
          fi
          bin_path="./bin/cputest-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ -f "$bin_path" ]; then
            echo "Uploading $bin_path to release..."
            curl -s \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$bin_path" \
              "https://uploads.github.com/repos/oneclickvirt/cputest/releases/$release_id/assets?name=$(basename "$bin_path")"
            echo "Upload completed for $bin_path"
          else
            echo "::warning::Skipping upload for ${{ matrix.goos }}/${{ matrix.goarch }} - no build artifact"
          fi