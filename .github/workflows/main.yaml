name: Build and Release

on:
  workflow_dispatch:

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "stable"

      - name: Build and Test on Default Platform
        run: |
          go build -v ./...
          go test -v ./...

      - name: Delete Existing Release Assets
        run: |
          release_id=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/oneclickvirt/cputest/releases/tags/output" | jq -r '.id')
          if [ "$release_id" != "null" ]; then
            echo "Deleting existing release assets..."
            assets=$(curl -s -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/oneclickvirt/cputest/releases/$release_id/assets" | jq -r '.[] | .id')
            for asset in $assets; do
              echo "Deleting asset with ID: $asset"
              curl -s -X DELETE -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/oneclickvirt/cputest/releases/assets/$asset"
            done
            sleep 30
          else
            echo "No existing release found, skipping asset deletion"
          fi

  release-binary:
    name: Release Go Binary (Cross-Platform)
    runs-on: ${{ (matrix.goos == 'windows' && (matrix.goarch == 'arm64' || matrix.goarch == 'arm')) && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
        goos: [windows, freebsd, openbsd, netbsd, linux]
        goarch: [amd64, 386]
        exclude:
          - goarch: 386
            goos: freebsd
          - goarch: 386
            goos: openbsd
          - goarch: 386
            goos: netbsd
        include:
          - goos: windows
            goarch: arm64
          - goos: windows
            goarch: arm
            goarm: 7
          - goos: linux
            goarch: arm
            goarm: 7
          - goos: linux
            goarch: arm64
          - goos: linux
            goarch: riscv64
          - goos: linux
            goarch: mips64
          - goos: linux
            goarch: mips64le
          - goos: linux
            goarch: mipsle
          - goos: linux
            goarch: mips
          - goos: linux
            goarch: ppc64
          - goos: linux
            goarch: ppc64le
          - goos: linux
            goarch: s390x
          - goos: freebsd
            goarch: arm64
          - goos: freebsd
            goarch: arm
            goarm: 7
          - goos: openbsd
            goarch: arm64
          - goos: openbsd
            goarch: arm
            goarm: 7
          - goos: netbsd
            goarch: arm64
          - goos: netbsd
            goarch: arm
            goarm: 7
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "1.24.5"

      - name: Install base build tools and cross compilers
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential clang lld llvm jq curl

      - name: Build Binary
        env:
          GOARM: ${{ matrix.goarm || '' }}
        run: |
          mkdir -p bin
          cd cmd
          output_file="../bin/cputest-${{ matrix.goos }}-${{ matrix.goarch }}"
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} GOARM=$GOARM CGO_ENABLED=0 \
            go build -o "$output_file" -v -ldflags="-s -w" -trimpath .

      - name: Upload Artifact
        run: |
          release_id=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/oneclickvirt/cputest/releases/tags/output" | jq -r '.id')
          bin_path="./bin/cputest-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ -f "$bin_path" ]; then
            curl -s \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$bin_path" \
              "https://uploads.github.com/repos/oneclickvirt/cputest/releases/$release_id/assets?name=$(basename "$bin_path")"
          fi

  build-darwin:
    name: Build macOS Binaries (CGO)
    runs-on: macos-latest
    needs: build
    strategy:
      matrix:
        include:
          - goos: darwin
            goarch: amd64
            cflags: "-O2 -arch x86_64 -mmacosx-version-min=10.12"
          - goos: darwin
            goarch: arm64
            cflags: "-O2 -arch arm64 -mmacosx-version-min=11.0"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: "stable"

      - name: Build Darwin ${{ matrix.goarch }}
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1
          CC: clang
          CFLAGS: ${{ matrix.cflags }}
        run: |
          mkdir -p bin
          cd cmd
          output="../bin/cputest-${GOOS}-${GOARCH}"
          CGO_ENABLED=1 GOOS=$GOOS GOARCH=$GOARCH CC=$CC \
            CGO_CFLAGS="$CFLAGS" CGO_LDFLAGS="-s -w" \
            go build -v -trimpath -o "$output" -ldflags="-s -w"

      - name: Upload Darwin Artifact
        run: |
          release_id=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/oneclickvirt/cputest/releases/tags/output" | jq -r '.id')
          bin_path="./bin/cputest-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ -f "$bin_path" ]; then
            curl -s \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$bin_path" \
              "https://uploads.github.com/repos/oneclickvirt/cputest/releases/$release_id/assets?name=$(basename "$bin_path")"
          fi
