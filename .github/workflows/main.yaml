name: Build and Release
on:
  workflow_dispatch:

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 'stable'

    - name: Build and Test on Default Platform
      run: |
        go build -v ./...
        go test -v ./...

    - name: Delete Existing Release Assets
      run: |
        release_id=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/oneclickvirt/cputest/releases/tags/output" | jq -r '.id')
        echo "Deleting existing release assets..."
        assets=$(curl -s -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/oneclickvirt/cputest/releases/$release_id/assets" | jq -r '.[] | .id')
        for asset in $assets; do
          echo "Deleting asset with ID: $asset"
          curl -X DELETE -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/oneclickvirt/cputest/releases/assets/$asset"
        done
        sleep 60

  release-binary:
    name: Release Go Binary
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        goos: [windows, freebsd, openbsd, linux, darwin]
        goarch: [amd64, 386]
        exclude:
          - goarch: 386
            goos: darwin
          - goarch: 386
            goos: openbsd
        include:
          - goos: windows
            goarch: arm64
          - goos: windows
            goarch: arm
            goarm: 7
          - goos: darwin
            goarch: arm64
          - goos: linux
            goarch: arm
            goarm: 7
          - goos: linux
            goarch: arm64
          - goos: linux
            goarch: riscv64
          - goos: linux
            goarch: mips64
          - goos: linux
            goarch: mips64le
          - goos: linux
            goarch: mipsle
          - goos: linux
            goarch: mips
          - goos: linux
            goarch: ppc64
          - goos: linux
            goarch: ppc64le
          - goos: freebsd
            goarch: arm64
          - goos: freebsd
            goarch: arm
            goarm: 7
          - goos: openbsd
            goarch: arm64
          - goos: openbsd
            goarch: arm
            goarm: 7

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 'stable'

    - name: Install base build tools
      run: |
        sudo apt-get update
        sudo apt-get install -y clang lld llvm jq curl

    - name: Set cross compiler
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        GOARM: ${{ matrix.goarm || '' }}
      run: |
        set -e
        case "${GOOS}-${GOARCH}" in
          linux-arm)
            sudo apt-get install -y gcc-arm-linux-gnueabihf
            echo "CC=arm-linux-gnueabihf-gcc" >> $GITHUB_ENV ;;
          linux-arm64)
            sudo apt-get install -y gcc-aarch64-linux-gnu
            echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV ;;
          linux-riscv64)
            sudo apt-get install -y gcc-riscv64-linux-gnu
            echo "CC=riscv64-linux-gnu-gcc" >> $GITHUB_ENV ;;
          linux-mips64)
            sudo apt-get install -y gcc-mips64-linux-gnuabi64
            echo "CC=mips64-linux-gnuabi64-gcc" >> $GITHUB_ENV ;;
          linux-mips64le)
            sudo apt-get install -y gcc-mips64el-linux-gnuabi64
            echo "CC=mips64el-linux-gnuabi64-gcc" >> $GITHUB_ENV ;;
          linux-mipsle)
            sudo apt-get install -y gcc-mipsel-linux-gnu
            echo "CC=mipsel-linux-gnu-gcc" >> $GITHUB_ENV ;;
          linux-mips)
            sudo apt-get install -y gcc-mips-linux-gnu
            echo "CC=mips-linux-gnu-gcc" >> $GITHUB_ENV ;;
          linux-ppc64)
            sudo apt-get install -y gcc-powerpc64-linux-gnu
            echo "CC=powerpc64-linux-gnu-gcc" >> $GITHUB_ENV ;;
          linux-ppc64le)
            sudo apt-get install -y gcc-powerpc64le-linux-gnu
            echo "CC=powerpc64le-linux-gnu-gcc" >> $GITHUB_ENV ;;
          freebsd-arm)
            echo "CC=clang --target=armv7-unknown-freebsd" >> $GITHUB_ENV ;;
          freebsd-arm64)
            echo "CC=clang --target=aarch64-unknown-freebsd" >> $GITHUB_ENV ;;
          openbsd-arm)
            echo "CC=clang --target=armv7-unknown-openbsd" >> $GITHUB_ENV ;;
          openbsd-arm64)
            echo "CC=clang --target=aarch64-unknown-openbsd" >> $GITHUB_ENV ;;
          windows-arm)
            echo "CC=clang --target=armv7-windows-gnu" >> $GITHUB_ENV ;;
          windows-arm64)
            echo "CC=clang --target=aarch64-windows-gnu" >> $GITHUB_ENV ;;
          darwin-arm64)
            echo "CC=clang --target=arm64-apple-darwin" >> $GITHUB_ENV ;;
        esac

    - name: Build and Release
      env:
        GOARM: ${{ matrix.goarm || '' }}
        CC: ${{ env.CC }}
      run: |
        mkdir -p bin
        cd cmd
        echo "Building for ${{ matrix.goos }}/${{ matrix.goarch }} with CC=$CC"

        CGO_ENABLED=1 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} GOARM=$GOARM \
          go build -o ../bin/cputest-${{ matrix.goos }}-${{ matrix.goarch }} \
          -v \
          -ldflags="-extldflags=-static -s -w" \
          -trimpath \
          .

    - name: Upload New Assets
      run: |
        release_id=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/oneclickvirt/cputest/releases/tags/output" | jq -r '.id')
        echo "Uploading new assets to release..."
        for file in ./bin/*; do
          echo "Uploading $file to release..."
          curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @"$file" \
            "https://uploads.github.com/repos/oneclickvirt/cputest/releases/$release_id/assets?name=$(basename "$file")"
          rm -rf $file
        done
